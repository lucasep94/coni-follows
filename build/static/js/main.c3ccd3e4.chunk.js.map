{"version":3,"sources":["Components/Models/Follower.js","Components/Containers/FollowerList.js","App.js","serviceWorker.js","index.js"],"names":["Follower","react_default","a","createElement","className","this","props","position","name","dist_default","format","fromDate","toString","Component","FollowerList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getUser","bind","assertThisInitialized","loadFollowers","http","axios","create","baseURL","timeout","headers","Client-ID","state","followers","user","loaded","lastPage","_this2","get","then","res","data","setState","catch","error","console","log","_this3","params","direction","limit","cursor","newArrayFollowers","concat","follows","sort","b","Date","created_at","_cursor","map","follower","index","Components_Models_Follower","display_name","key","id","_id","type","value","onClick","App","changePage","e","pageIndex","target","dataset","url","currentPage","Components_Containers_FollowerList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3ccd3e4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Moment from 'react-moment';\r\nimport './Follower.css';\r\n\r\nclass Follower extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"follower-item\">\r\n                <div className=\"cono-logo\"></div>\r\n                <div className=\"detail\">\r\n                    <div className=\"follower-name\">\r\n                        <span> #{this.props.position} {this.props.name}</span>\r\n                    </div>\r\n                    <div className=\"follower-date\">\r\n                        <Moment format=\"DD/MM/YYYY HH:mm:ss\"> \r\n                            {this.props.fromDate.toString()} \r\n                        </Moment>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Follower; // Don’t forget to use export default!","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Follower from '../Models/Follower';\r\nimport './FollowerList.css';\r\n\r\nclass FollowerList extends Component {\r\n\r\n    constructor (props){\r\n        super(props);\r\n        this.getUser = this.getUser.bind(this);        \r\n        this.loadFollowers = this.loadFollowers.bind(this);\r\n        this.http =  axios.create ({\r\n            baseURL: 'https://api.twitch.tv/helix/users?login=omeguis',\r\n            timeout: 1000,\r\n            headers: {'Client-ID': '8q4igphugwwctr8af95qr5424eof64'},\r\n          });\r\n\t\tthis.state = {\r\n            followers: [],\r\n            user: {},\r\n            loaded: false,\r\n            lastPage: ''\r\n\t\t};\t\t\r\n    } \r\n\r\n    componentWillMount() {        \r\n        this.getUser();        \r\n    }\r\n\r\n    getUser(){\r\n        this.http.get()\r\n\t\t    .then(res => {\t\t\t\r\n                const user = res.data.data[0];\r\n                this.setState({\r\n                    user: user,\r\n                    loaded: true                    \r\n                });\r\n                this.loadFollowers();\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    loadFollowers(){\r\n        //to_id: 33198924,\r\n        //first: 100\r\n        let params = {\r\n            direction: 'asc',  \r\n            limit: 5\r\n        }\r\n        params.cursor = this.state.lastPage !== '' ? this.state.lastPage : '';        \r\n        //'https://api.twitch.tv/helix/users/follows'\r\n        this.http.get('https://api.twitch.tv/kraken/channels/omeguis/follows',{\r\n                params: params\r\n            })\r\n\t\t    .then(res => {\t\t\t\r\n                let newArrayFollowers = this.state.followers.concat(res.data.follows);\r\n                \r\n                newArrayFollowers = newArrayFollowers.sort(function(a, b) {\r\n                    a = new Date(a.created_at);\r\n                    b = new Date(b.created_at);\r\n                    return a>b ? 1 : a<b ? -1 : 0;\r\n                });\r\n\r\n                this.setState({\r\n                    followers: newArrayFollowers,\r\n                    lastPage: res.data._cursor\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"follower-list\">                                \r\n                    { \r\n                        this.state.followers.map((follower, index) => (\r\n                            <Follower name={follower.user.display_name} position={index + 1} key={index} id={follower.user._id} fromDate={follower.created_at} />\r\n                        ))                    \r\n                    }                                    \r\n                </div>\r\n                <input type=\"button\" value=\"Load more...\" className=\"btn\" onClick={this.loadFollowers}></input>\r\n            </div>\r\n        );    \r\n    }\r\n}\r\n\r\nexport default FollowerList; // Don’t forget to use export default!","import React, {Component} from 'react';\nimport './App.css';\nimport FollowerList from './Components/Containers/FollowerList'\n\nclass App extends Component {\n  constructor (props){\n\t\tsuper(props)\n\t\t\n\t\tthis.changePage = this.changePage.bind(this)\n\t\tthis.state = {\n\t\t\tcurrentPage: \"1\"\n\t\t}\n  }\n  \n  changePage = function (e) {\t\t\n\t\tlet pageIndex = e.target.dataset.url;\n\t\tthis.setState((state, props) => ({\n\t\t  currentPage: pageIndex\n\t\t}));\n  }  \n  \n  render(){\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\"></div>\n        <div className=\"App-body\">\n          <h1 className=\"body-title\">Followers order by date</h1>\n          <FollowerList />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}